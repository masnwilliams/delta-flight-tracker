{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/mason/GitHub/delta-flight-tracker/src/components/FlightStats.tsx"],"sourcesContent":["'use client';\n\nimport type { FlightData } from '@/lib/types';\n\ninterface FlightStatsProps {\n  flight: FlightData;\n}\n\nexport function FlightStats({ flight }: FlightStatsProps) {\n  return (\n    <div className=\"bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-bold\">Flight {flight.flightNumber}</h2>\n        <span className=\"px-3 py-1 bg-green-500/20 text-green-300 rounded-full text-sm font-semibold\">\n          {flight.flightPhase}\n        </span>\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <StatCard\n          label=\"Altitude\"\n          value={flight.altitude.toLocaleString()}\n          unit=\"ft\"\n          icon=\"✈️\"\n        />\n        <StatCard\n          label=\"Ground Speed\"\n          value={flight.groundspeed.toString()}\n          unit=\"kts\"\n          icon=\"⚡\"\n        />\n        <StatCard\n          label=\"Distance to Go\"\n          value={flight.distanceToGo.toString()}\n          unit=\"nm\"\n          icon=\"📍\"\n        />\n        <StatCard\n          label=\"ETA\"\n          value={flight.eta}\n          unit=\"\"\n          icon=\"🕐\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mt-4\">\n        <StatCard\n          label=\"Heading\"\n          value={flight.heading.toString()}\n          unit=\"°\"\n          icon=\"🧭\"\n        />\n        <StatCard\n          label=\"Outside Temp\"\n          value={flight.airTemperature.toString()}\n          unit=\"°C\"\n          icon=\"🌡️\"\n        />\n        <StatCard\n          label=\"Time to Go\"\n          value={flight.timeToGo >= 60 ? `${Math.floor(flight.timeToGo / 60)}h ${flight.timeToGo % 60}m` : `${flight.timeToGo}m`}\n          unit=\"\"\n          icon=\"⏱️\"\n        />\n      </div>\n\n      <div className=\"mt-6 flex items-center justify-between text-sm text-white/60\">\n        <span>{flight.origin} → {flight.destination}</span>\n        <span>Aircraft: {flight.vehicleId}</span>\n      </div>\n    </div>\n  );\n}\n\ninterface StatCardProps {\n  label: string;\n  value: string;\n  unit: string;\n  icon: string;\n}\n\nfunction StatCard({ label, value, unit, icon }: StatCardProps) {\n  return (\n    <div className=\"bg-white/5 rounded-xl p-4 border border-white/10\">\n      <div className=\"flex items-center gap-2 mb-2\">\n        <span className=\"text-2xl\">{icon}</span>\n        <span className=\"text-xs text-white/60 uppercase tracking-wide\">{label}</span>\n      </div>\n      <div className=\"flex items-baseline gap-1\">\n        <span className=\"text-2xl font-bold\">{value}</span>\n        {unit && <span className=\"text-sm text-white/60\">{unit}</span>}\n      </div>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":";;;;;AAAA;;AAQO,SAAS,YAAY,EAAE,MAAM,EAAoB;IACtD,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;;4BAAqB;4BAAQ,OAAO,YAAY;;;;;;;kCAC9D,6LAAC;wBAAK,WAAU;kCACb,OAAO,WAAW;;;;;;;;;;;;0BAIvB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,OAAM;wBACN,OAAO,OAAO,QAAQ,CAAC,cAAc;wBACrC,MAAK;wBACL,MAAK;;;;;;kCAEP,6LAAC;wBACC,OAAM;wBACN,OAAO,OAAO,WAAW,CAAC,QAAQ;wBAClC,MAAK;wBACL,MAAK;;;;;;kCAEP,6LAAC;wBACC,OAAM;wBACN,OAAO,OAAO,YAAY,CAAC,QAAQ;wBACnC,MAAK;wBACL,MAAK;;;;;;kCAEP,6LAAC;wBACC,OAAM;wBACN,OAAO,OAAO,GAAG;wBACjB,MAAK;wBACL,MAAK;;;;;;;;;;;;0BAIT,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,OAAM;wBACN,OAAO,OAAO,OAAO,CAAC,QAAQ;wBAC9B,MAAK;wBACL,MAAK;;;;;;kCAEP,6LAAC;wBACC,OAAM;wBACN,OAAO,OAAO,cAAc,CAAC,QAAQ;wBACrC,MAAK;wBACL,MAAK;;;;;;kCAEP,6LAAC;wBACC,OAAM;wBACN,OAAO,OAAO,QAAQ,IAAI,KAAK,GAAG,KAAK,KAAK,CAAC,OAAO,QAAQ,GAAG,IAAI,EAAE,EAAE,OAAO,QAAQ,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,OAAO,QAAQ,CAAC,CAAC,CAAC;wBACtH,MAAK;wBACL,MAAK;;;;;;;;;;;;0BAIT,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;;4BAAM,OAAO,MAAM;4BAAC;4BAAI,OAAO,WAAW;;;;;;;kCAC3C,6LAAC;;4BAAK;4BAAW,OAAO,SAAS;;;;;;;;;;;;;;;;;;;AAIzC;KAhEgB;AAyEhB,SAAS,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAiB;IAC3D,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAK,WAAU;kCAAY;;;;;;kCAC5B,6LAAC;wBAAK,WAAU;kCAAiD;;;;;;;;;;;;0BAEnE,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAK,WAAU;kCAAsB;;;;;;oBACrC,sBAAQ,6LAAC;wBAAK,WAAU;kCAAyB;;;;;;;;;;;;;;;;;;AAI1D;MAbS","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/mason/GitHub/delta-flight-tracker/src/components/FlightMap.tsx"],"sourcesContent":["'use client';\n\nimport type { FlightData } from '@/lib/types';\nimport { MapContainer, TileLayer, Polyline, CircleMarker, Marker, Tooltip } from 'react-leaflet';\nimport { divIcon } from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\ninterface FlightMapProps {\n  flight: FlightData;\n}\n\nexport function FlightMap({ flight }: FlightMapProps) {\n  // Airport coordinates\n  // KSLC: Salt Lake City\n  const origin: [number, number] = [40.7884, -111.9778];\n  // KCVG: Cincinnati\n  const destination: [number, number] = [39.0488, -84.6678];\n  \n  // Current plane position\n  const planePosition: [number, number] = [flight.latitude, flight.longitude];\n  \n  // Calculate center point between origin and destination\n  const center: [number, number] = [\n    (origin[0] + destination[0]) / 2,\n    (origin[1] + destination[1]) / 2\n  ];\n\n  // Create airplane icon with rotation\n  const planeIcon = divIcon({\n    html: `\n      <div style=\"transform: rotate(${flight.heading}deg); transform-origin: center;\">\n        <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M15 5 L12 18 L10 18 L10 22 L12 22 L12 20 L18 20 L18 22 L20 22 L20 18 L18 18 L15 5Z\" \n                fill=\"white\" stroke=\"#60a5fa\" stroke-width=\"1.5\" \n                filter=\"drop-shadow(0 0 6px #60a5fa)\"/>\n        </svg>\n      </div>\n    `,\n    className: 'plane-marker',\n    iconSize: [30, 30],\n    iconAnchor: [15, 15],\n  });\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20\">\n      <h2 className=\"text-2xl font-bold mb-4\">Flight Path</h2>\n      <div className=\"relative w-full h-96 rounded-xl overflow-hidden\">\n        <MapContainer\n          center={center}\n          zoom={5}\n          style={{ height: '100%', width: '100%' }}\n          zoomControl={true}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          \n          {/* Flight path line */}\n          <Polyline\n            positions={[origin, destination]}\n            pathOptions={{\n              color: '#60a5fa',\n              weight: 3,\n              opacity: 0.6,\n              dashArray: '10, 10'\n            }}\n          />\n          \n          {/* Origin airport marker */}\n          <CircleMarker\n            center={origin}\n            radius={8}\n            pathOptions={{\n              fillColor: '#22c55e',\n              fillOpacity: 1,\n              color: 'white',\n              weight: 2\n            }}\n          >\n            <Tooltip permanent direction=\"bottom\" offset={[0, 10]}>\n              SLC (Origin)\n            </Tooltip>\n          </CircleMarker>\n          \n          {/* Destination airport marker */}\n          <CircleMarker\n            center={destination}\n            radius={8}\n            pathOptions={{\n              fillColor: '#ef4444',\n              fillOpacity: 1,\n              color: 'white',\n              weight: 2\n            }}\n          >\n            <Tooltip permanent direction=\"bottom\" offset={[0, 10]}>\n              CVG (Destination)\n            </Tooltip>\n          </CircleMarker>\n          \n          {/* Airplane current position */}\n          <Marker position={planePosition} icon={planeIcon}>\n            <Tooltip direction=\"top\" offset={[0, -15]}>\n              {flight.latitude.toFixed(4)}°N, {Math.abs(flight.longitude).toFixed(4)}°W\n              <br />\n              Alt: {flight.altitude.toLocaleString()} ft\n              <br />\n              Speed: {flight.groundspeed} kts\n            </Tooltip>\n          </Marker>\n        </MapContainer>\n      </div>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":";;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;;;;;AAWO,SAAS,UAAU,EAAE,MAAM,EAAkB;IAClD,sBAAsB;IACtB,uBAAuB;IACvB,MAAM,SAA2B;QAAC;QAAS,CAAC;KAAS;IACrD,mBAAmB;IACnB,MAAM,cAAgC;QAAC;QAAS,CAAC;KAAQ;IAEzD,yBAAyB;IACzB,MAAM,gBAAkC;QAAC,OAAO,QAAQ;QAAE,OAAO,SAAS;KAAC;IAE3E,wDAAwD;IACxD,MAAM,SAA2B;QAC/B,CAAC,MAAM,CAAC,EAAE,GAAG,WAAW,CAAC,EAAE,IAAI;QAC/B,CAAC,MAAM,CAAC,EAAE,GAAG,WAAW,CAAC,EAAE,IAAI;KAChC;IAED,qCAAqC;IACrC,MAAM,YAAY,IAAA,+JAAO,EAAC;QACxB,MAAM,CAAC;oCACyB,EAAE,OAAO,OAAO,CAAC;;;;;;;IAOjD,CAAC;QACD,WAAW;QACX,UAAU;YAAC;YAAI;SAAG;QAClB,YAAY;YAAC;YAAI;SAAG;IACtB;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC,0KAAY;oBACX,QAAQ;oBACR,MAAM;oBACN,OAAO;wBAAE,QAAQ;wBAAQ,OAAO;oBAAO;oBACvC,aAAa;;sCAEb,6LAAC,oKAAS;4BACR,aAAY;4BACZ,KAAI;;;;;;sCAIN,6LAAC,kKAAQ;4BACP,WAAW;gCAAC;gCAAQ;6BAAY;4BAChC,aAAa;gCACX,OAAO;gCACP,QAAQ;gCACR,SAAS;gCACT,WAAW;4BACb;;;;;;sCAIF,6LAAC,0KAAY;4BACX,QAAQ;4BACR,QAAQ;4BACR,aAAa;gCACX,WAAW;gCACX,aAAa;gCACb,OAAO;gCACP,QAAQ;4BACV;sCAEA,cAAA,6LAAC,gKAAO;gCAAC,SAAS;gCAAC,WAAU;gCAAS,QAAQ;oCAAC;oCAAG;iCAAG;0CAAE;;;;;;;;;;;sCAMzD,6LAAC,0KAAY;4BACX,QAAQ;4BACR,QAAQ;4BACR,aAAa;gCACX,WAAW;gCACX,aAAa;gCACb,OAAO;gCACP,QAAQ;4BACV;sCAEA,cAAA,6LAAC,gKAAO;gCAAC,SAAS;gCAAC,WAAU;gCAAS,QAAQ;oCAAC;oCAAG;iCAAG;0CAAE;;;;;;;;;;;sCAMzD,6LAAC,8JAAM;4BAAC,UAAU;4BAAe,MAAM;sCACrC,cAAA,6LAAC,gKAAO;gCAAC,WAAU;gCAAM,QAAQ;oCAAC;oCAAG,CAAC;iCAAG;;oCACtC,OAAO,QAAQ,CAAC,OAAO,CAAC;oCAAG;oCAAK,KAAK,GAAG,CAAC,OAAO,SAAS,EAAE,OAAO,CAAC;oCAAG;kDACvE,6LAAC;;;;;oCAAK;oCACA,OAAO,QAAQ,CAAC,cAAc;oCAAG;kDACvC,6LAAC;;;;;oCAAK;oCACE,OAAO,WAAW;oCAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOzC;KAxGgB","debugId":null}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file:///Users/mason/GitHub/delta-flight-tracker/src/components/WeatherCard.tsx"],"sourcesContent":["'use client';\n\nimport type { WeatherData } from '@/lib/types';\n\ninterface WeatherCardProps {\n  weather: WeatherData;\n}\n\nexport function WeatherCard({ weather }: WeatherCardProps) {\n  const getWeatherEmoji = (skyCode: string) => {\n    const code = parseInt(skyCode);\n    if (code >= 1 && code <= 4) return '⛈️';\n    if (code >= 5 && code <= 12) return '🌧️';\n    if (code >= 13 && code <= 16) return '🌨️';\n    if (code >= 19 && code <= 22) return '🌫️';\n    if (code >= 23 && code <= 24) return '🌬️';\n    if (code >= 26 && code <= 28) return '☁️';\n    if (code >= 29 && code <= 30) return '⛅';\n    if (code >= 31 && code <= 34) return '☀️';\n    return '🌤️';\n  };\n\n  // Convert Celsius to Fahrenheit\n  const toFahrenheit = (celsius: string | null): string => {\n    if (!celsius) return '--';\n    const c = parseFloat(celsius);\n    return Math.round((c * 9/5) + 32).toString();\n  };\n\n  const currentTempF = toFahrenheit(weather.observation.temperatureC);\n  const currentTempC = weather.observation.temperatureC;\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20\">\n      <h2 className=\"text-2xl font-bold mb-4\">Destination Weather</h2>\n      \n      <div className=\"flex items-center gap-4 mb-6\">\n        <div className=\"text-6xl\">\n          {getWeatherEmoji(weather.observation.skyCode)}\n        </div>\n        <div>\n          <div className=\"text-4xl font-bold\">{currentTempF}°F</div>\n          <div className=\"text-white/60 text-sm\">{currentTempC}°C</div>\n          <div className=\"text-white/60 mt-1\">{weather.cityName}, {weather.cityCode}</div>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-semibold text-white/60 uppercase tracking-wide mb-3\">\n          5-Day Forecast\n        </h3>\n        {weather.forecast.slice(0, 5).map((day, index) => (\n          <div\n            key={index}\n            className=\"flex items-center justify-between bg-white/5 rounded-lg p-3 border border-white/10\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <span className=\"text-sm text-white/60\">\n                {index === 0 ? 'Today' : `Day ${day.dayNumber}`}\n              </span>\n              <span className=\"text-sm\">{day.fullPhrase}</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm\">\n              <span className=\"text-blue-300\">{toFahrenheit(day.lowTemperatureC)}°F</span>\n              <span className=\"text-white/40\">/</span>\n              <span className=\"text-red-300\">{toFahrenheit(day.highTemperatureC)}°F</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":";;;;;AAAA;;AAQO,SAAS,YAAY,EAAE,OAAO,EAAoB;IACvD,MAAM,kBAAkB,CAAC;QACvB,MAAM,OAAO,SAAS;QACtB,IAAI,QAAQ,KAAK,QAAQ,GAAG,OAAO;QACnC,IAAI,QAAQ,KAAK,QAAQ,IAAI,OAAO;QACpC,IAAI,QAAQ,MAAM,QAAQ,IAAI,OAAO;QACrC,IAAI,QAAQ,MAAM,QAAQ,IAAI,OAAO;QACrC,IAAI,QAAQ,MAAM,QAAQ,IAAI,OAAO;QACrC,IAAI,QAAQ,MAAM,QAAQ,IAAI,OAAO;QACrC,IAAI,QAAQ,MAAM,QAAQ,IAAI,OAAO;QACrC,IAAI,QAAQ,MAAM,QAAQ,IAAI,OAAO;QACrC,OAAO;IACT;IAEA,gCAAgC;IAChC,MAAM,eAAe,CAAC;QACpB,IAAI,CAAC,SAAS,OAAO;QACrB,MAAM,IAAI,WAAW;QACrB,OAAO,KAAK,KAAK,CAAC,AAAC,IAAI,IAAE,IAAK,IAAI,QAAQ;IAC5C;IAEA,MAAM,eAAe,aAAa,QAAQ,WAAW,CAAC,YAAY;IAClE,MAAM,eAAe,QAAQ,WAAW,CAAC,YAAY;IAErD,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAA0B;;;;;;0BAExC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCACZ,gBAAgB,QAAQ,WAAW,CAAC,OAAO;;;;;;kCAE9C,6LAAC;;0CACC,6LAAC;gCAAI,WAAU;;oCAAsB;oCAAa;;;;;;;0CAClD,6LAAC;gCAAI,WAAU;;oCAAyB;oCAAa;;;;;;;0CACrD,6LAAC;gCAAI,WAAU;;oCAAsB,QAAQ,QAAQ;oCAAC;oCAAG,QAAQ,QAAQ;;;;;;;;;;;;;;;;;;;0BAI7E,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAmE;;;;;;oBAGhF,QAAQ,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,KAAK,sBACtC,6LAAC;4BAEC,WAAU;;8CAEV,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAK,WAAU;sDACb,UAAU,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,SAAS,EAAE;;;;;;sDAEjD,6LAAC;4CAAK,WAAU;sDAAW,IAAI,UAAU;;;;;;;;;;;;8CAE3C,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAK,WAAU;;gDAAiB,aAAa,IAAI,eAAe;gDAAE;;;;;;;sDACnE,6LAAC;4CAAK,WAAU;sDAAgB;;;;;;sDAChC,6LAAC;4CAAK,WAAU;;gDAAgB,aAAa,IAAI,gBAAgB;gDAAE;;;;;;;;;;;;;;2BAZhE;;;;;;;;;;;;;;;;;AAmBjB;KAhEgB","debugId":null}},
    {"offset": {"line": 675, "column": 0}, "map": {"version":3,"sources":["file:///Users/mason/GitHub/delta-flight-tracker/src/components/ServicesPanel.tsx"],"sourcesContent":["'use client';\n\nimport type { ServicesData } from '@/lib/types';\n\ninterface ServicesPanelProps {\n  services: ServicesData;\n}\n\nexport function ServicesPanel({ services }: ServicesPanelProps) {\n  const getServiceIcon = (name: string) => {\n    switch (name.toLowerCase()) {\n      case 'ifc':\n      case 'connectivity':\n        return '📡';\n      case 'iptv':\n        return '📺';\n      case 'ife-01':\n      case 'w-ife':\n        return '🎬';\n      case 'portal':\n        return '🌐';\n      case 'satellitenetwork':\n        return '🛰️';\n      default:\n        return '✨';\n    }\n  };\n\n  const getStatusColor = (state: string) => {\n    switch (state.toLowerCase()) {\n      case 'available':\n        return 'bg-green-500/20 text-green-300 border-green-500/30';\n      case 'disabled':\n        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n      default:\n        return 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30';\n    }\n  };\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20\">\n      <h2 className=\"text-2xl font-bold mb-4\">Available Services</h2>\n      \n      <div className=\"space-y-3\">\n        <div className=\"flex items-center gap-3 bg-white/5 rounded-lg p-4 border border-white/10\">\n          <span className=\"text-3xl\">📡</span>\n          <div className=\"flex-1\">\n            <div className=\"font-semibold\">Connectivity</div>\n            <div className=\"text-xs text-white/60\">Internet Access</div>\n          </div>\n          <span className={`px-3 py-1 rounded-full text-xs font-semibold border ${\n            services.connectivity \n              ? 'bg-green-500/20 text-green-300 border-green-500/30' \n              : 'bg-red-500/20 text-red-300 border-red-500/30'\n          }`}>\n            {services.connectivity ? 'Connected' : 'Offline'}\n          </span>\n        </div>\n\n        {services.other.serviceList.map((service, index) => (\n          <div\n            key={index}\n            className=\"flex items-center gap-3 bg-white/5 rounded-lg p-4 border border-white/10\"\n          >\n            <span className=\"text-3xl\">{getServiceIcon(service.serviceName)}</span>\n            <div className=\"flex-1\">\n              <div className=\"font-semibold\">\n                {service.serviceName.replace(/([A-Z])/g, ' $1').trim()}\n              </div>\n              <div className=\"text-xs text-white/60\">\n                {service.href ? 'Access available' : 'System service'}\n              </div>\n            </div>\n            <span className={`px-3 py-1 rounded-full text-xs font-semibold border ${getStatusColor(service.serviceState)}`}>\n              {service.serviceState}\n            </span>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"mt-4 text-xs text-white/40 text-center\">\n        Last updated: {new Date(services.other.timestamp).toLocaleTimeString()}\n      </div>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":";;;;;AAAA;;AAQO,SAAS,cAAc,EAAE,QAAQ,EAAsB;IAC5D,MAAM,iBAAiB,CAAC;QACtB,OAAQ,KAAK,WAAW;YACtB,KAAK;YACL,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;YACL,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,MAAM,iBAAiB,CAAC;QACtB,OAAQ,MAAM,WAAW;YACvB,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAA0B;;;;;;0BAExC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAK,WAAU;0CAAW;;;;;;0CAC3B,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;kDAAgB;;;;;;kDAC/B,6LAAC;wCAAI,WAAU;kDAAwB;;;;;;;;;;;;0CAEzC,6LAAC;gCAAK,WAAW,CAAC,oDAAoD,EACpE,SAAS,YAAY,GACjB,uDACA,gDACJ;0CACC,SAAS,YAAY,GAAG,cAAc;;;;;;;;;;;;oBAI1C,SAAS,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,SAAS,sBACxC,6LAAC;4BAEC,WAAU;;8CAEV,6LAAC;oCAAK,WAAU;8CAAY,eAAe,QAAQ,WAAW;;;;;;8CAC9D,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAI,WAAU;sDACZ,QAAQ,WAAW,CAAC,OAAO,CAAC,YAAY,OAAO,IAAI;;;;;;sDAEtD,6LAAC;4CAAI,WAAU;sDACZ,QAAQ,IAAI,GAAG,qBAAqB;;;;;;;;;;;;8CAGzC,6LAAC;oCAAK,WAAW,CAAC,oDAAoD,EAAE,eAAe,QAAQ,YAAY,GAAG;8CAC3G,QAAQ,YAAY;;;;;;;2BAblB;;;;;;;;;;;0BAmBX,6LAAC;gBAAI,WAAU;;oBAAyC;oBACvC,IAAI,KAAK,SAAS,KAAK,CAAC,SAAS,EAAE,kBAAkB;;;;;;;;;;;;;AAI5E;KA7EgB","debugId":null}},
    {"offset": {"line": 859, "column": 0}, "map": {"version":3,"sources":["file:///Users/mason/GitHub/delta-flight-tracker/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { FlightStats } from '@/components/FlightStats';\nimport { FlightMap } from '@/components/FlightMap';\nimport { WeatherCard } from '@/components/WeatherCard';\nimport { ServicesPanel } from '@/components/ServicesPanel';\nimport type { FlightData, WeatherData, ServicesData } from '@/lib/types';\n\nexport default function Home() {\n  const [flightData, setFlightData] = useState<FlightData | null>(null);\n  const [weatherData, setWeatherData] = useState<WeatherData | null>(null);\n  const [servicesData, setServicesData] = useState<ServicesData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());\n\n  const fetchData = async () => {\n    try {\n      const [flightRes, weatherRes, servicesRes] = await Promise.all([\n        fetch('/api/flight'),\n        fetch('/api/weather'),\n        fetch('/api/services'),\n      ]);\n\n      if (!flightRes.ok || !weatherRes.ok || !servicesRes.ok) {\n        throw new Error('Failed to fetch data');\n      }\n\n      const [flight, weather, services] = await Promise.all([\n        flightRes.json(),\n        weatherRes.json(),\n        servicesRes.json(),\n      ]);\n\n      setFlightData(flight as FlightData);\n      setWeatherData(weather as WeatherData);\n      setServicesData(services as ServicesData);\n      setLastUpdate(new Date());\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    \n    // Refresh every 5 seconds\n    const interval = setInterval(fetchData, 5000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-6xl mb-4\">✈️</div>\n          <div className=\"text-xl font-semibold\">Loading flight data...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !flightData || !weatherData || !servicesData) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center bg-red-500/20 border border-red-500/50 rounded-2xl p-8 max-w-md\">\n          <div className=\"text-4xl mb-4\">⚠️</div>\n          <div className=\"text-xl font-semibold mb-2\">Connection Error</div>\n          <div className=\"text-white/60 mb-4\">\n            {error || 'Unable to connect to Delta WiFi. Make sure you are connected to the in-flight network.'}\n          </div>\n          <button\n            onClick={fetchData}\n            className=\"px-6 py-2 bg-blue-500 hover:bg-blue-600 rounded-lg font-semibold transition-colors\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"min-h-screen p-4 md:p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8 text-center\">\n          <div className=\"text-5xl mb-4\">✈️</div>\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-2\">\n            Delta Flight Tracker\n          </h1>\n          <p className=\"text-white/60\">\n            Real-time flight information • Updates every 5 seconds\n          </p>\n          <div className=\"mt-2 text-sm text-white/40\">\n            Last updated: {lastUpdate.toLocaleTimeString()}\n          </div>\n        </div>\n\n        {/* Main Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n          {/* Left Column - Flight Stats */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <FlightStats flight={flightData} />\n            <FlightMap flight={flightData} />\n          </div>\n\n          {/* Right Column - Weather & Services */}\n          <div className=\"space-y-6\">\n            <WeatherCard weather={weatherData} />\n            <ServicesPanel services={servicesData} />\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-xs text-white/40 mt-8\">\n          <p>Data provided by Delta Air Lines in-flight WiFi system</p>\n          <p className=\"mt-1\">Built with Next.js • Not affiliated with Delta Air Lines</p>\n        </div>\n      </div>\n    </main>\n  );\n}\n\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;;;AANA;;;;;;AASe,SAAS;;IACtB,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,yKAAQ,EAAoB;IAChE,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,yKAAQ,EAAqB;IACnE,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,yKAAQ,EAAsB;IACtE,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAC;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,yKAAQ,EAAgB;IAClD,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,yKAAQ,EAAO,IAAI;IAEvD,MAAM,YAAY;QAChB,IAAI;YACF,MAAM,CAAC,WAAW,YAAY,YAAY,GAAG,MAAM,QAAQ,GAAG,CAAC;gBAC7D,MAAM;gBACN,MAAM;gBACN,MAAM;aACP;YAED,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,EAAE;gBACtD,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,CAAC,QAAQ,SAAS,SAAS,GAAG,MAAM,QAAQ,GAAG,CAAC;gBACpD,UAAU,IAAI;gBACd,WAAW,IAAI;gBACf,YAAY,IAAI;aACjB;YAED,cAAc;YACd,eAAe;YACf,gBAAgB;YAChB,cAAc,IAAI;YAClB,SAAS;QACX,EAAE,OAAO,KAAK;YACZ,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;QAChD,SAAU;YACR,WAAW;QACb;IACF;IAEA,IAAA,0KAAS;0BAAC;YACR;YAEA,0BAA0B;YAC1B,MAAM,WAAW,YAAY,WAAW;YAExC;kCAAO,IAAM,cAAc;;QAC7B;yBAAG,EAAE;IAEL,IAAI,SAAS;QACX,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCAAgB;;;;;;kCAC/B,6LAAC;wBAAI,WAAU;kCAAwB;;;;;;;;;;;;;;;;;IAI/C;IAEA,IAAI,SAAS,CAAC,cAAc,CAAC,eAAe,CAAC,cAAc;QACzD,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCAAgB;;;;;;kCAC/B,6LAAC;wBAAI,WAAU;kCAA6B;;;;;;kCAC5C,6LAAC;wBAAI,WAAU;kCACZ,SAAS;;;;;;kCAEZ,6LAAC;wBACC,SAAS;wBACT,WAAU;kCACX;;;;;;;;;;;;;;;;;IAMT;IAEA,qBACE,6LAAC;QAAK,WAAU;kBACd,cAAA,6LAAC;YAAI,WAAU;;8BAEb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;sCAAgB;;;;;;sCAC/B,6LAAC;4BAAG,WAAU;sCAAsC;;;;;;sCAGpD,6LAAC;4BAAE,WAAU;sCAAgB;;;;;;sCAG7B,6LAAC;4BAAI,WAAU;;gCAA6B;gCAC3B,WAAW,kBAAkB;;;;;;;;;;;;;8BAKhD,6LAAC;oBAAI,WAAU;;sCAEb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC,mJAAW;oCAAC,QAAQ;;;;;;8CACrB,6LAAC,+IAAS;oCAAC,QAAQ;;;;;;;;;;;;sCAIrB,6LAAC;4BAAI,WAAU;;8CACb,6LAAC,mJAAW;oCAAC,SAAS;;;;;;8CACtB,6LAAC,uJAAa;oCAAC,UAAU;;;;;;;;;;;;;;;;;;8BAK7B,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;sCAAE;;;;;;sCACH,6LAAC;4BAAE,WAAU;sCAAO;;;;;;;;;;;;;;;;;;;;;;;AAK9B;GAtHwB;KAAA","debugId":null}}]
}